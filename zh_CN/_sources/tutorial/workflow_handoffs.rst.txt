
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_handoffs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_handoffs.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_handoffs.py:


.. _handoffs:

Handoffs
========================================

Handoffs 是由 OpenAI 提出的工作流模式，通过调用子智能体的方式来完成目标任务。
在 AgentScope 中通过工具调用的方式实现 handoffs 非常简单。首先，我们创建一个函数来允许协调者动态创建子智能体。

.. figure:: ../../_static/images/handoffs.png
   :width: 80%
   :align: center
   :alt: 协调者-子智能体工作流

   *Handoffs 示例*

.. GENERATED FROM PYTHON SOURCE LINES 19-95


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/runner/work/agentscope/agentscope/docs/tutorial/zh_CN/src/workflow_handoffs.py", line 94, in <module>
        asyncio.run(run_handoffs())
      File "/opt/hostedtoolcache/Python/3.10.19/x64/lib/python3.10/asyncio/runners.py", line 44, in run
        return loop.run_until_complete(main)
      File "/opt/hostedtoolcache/Python/3.10.19/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
        return future.result()
      File "/home/runner/work/agentscope/agentscope/docs/tutorial/zh_CN/src/workflow_handoffs.py", line 91, in run_handoffs
        await orchestrator(Msg("user", task_description, "user"))
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_agent_base.py", line 422, in __call__
        reply_msg = await self.reply(*args, **kwargs)
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_agent_meta.py", line 120, in async_wrapper
        current_output = await original_func(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/tracing/_trace.py", line 382, in wrapper
        return await func(self, *args, **kwargs)
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_react_agent.py", line 310, in reply
        msg_reasoning = await self._reasoning()
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_agent_meta.py", line 120, in async_wrapper
        current_output = await original_func(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_react_agent.py", line 374, in _reasoning
        res = await self.model(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/tracing/_trace.py", line 638, in async_wrapper
        return await func(self, *args, **kwargs)
      File "/home/runner/work/agentscope/agentscope/src/agentscope/model/_dashscope_model.py", line 221, in __call__
        parsed_response = await self._parse_dashscope_generation_response(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/model/_dashscope_model.py", line 401, in _parse_dashscope_generation_response
        raise RuntimeError(response)
    RuntimeError: {"status_code": 401, "request_id": "689fd14a-24ee-4212-a2b4-cb0f240572f5", "code": "InvalidApiKey", "message": "No API-key provided.", "output": null, "usage": null}






|

.. code-block:: Python


    import asyncio
    import os

    from agentscope.agent import ReActAgent
    from agentscope.formatter import DashScopeChatFormatter
    from agentscope.memory import InMemoryMemory
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.tool import (
        ToolResponse,
        Toolkit,
        execute_python_code,
    )


    # 创建子智能体的工具函数
    async def create_worker(
        task_description: str,
    ) -> ToolResponse:
        """创建一个子智能体来完成给定的任务。子智能体配备了 Python 执行工具。

        Args:
            task_description (``str``):
                子智能体要完成的任务描述。
        """
        # 为子智能体智能体配备一些工具
        toolkit = Toolkit()
        toolkit.register_tool_function(execute_python_code)

        # 创建子智能体智能体
        worker = ReActAgent(
            name="Worker",
            sys_prompt="你是一个智能体。你的目标是完成给定的任务。",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeChatFormatter(),
            toolkit=toolkit,
        )
        # 让子智能体完成任务
        res = await worker(Msg("user", task_description, "user"))
        return ToolResponse(
            content=res.get_content_blocks("text"),
        )


    async def run_handoffs() -> None:
        """交接工作流示例。"""
        # 初始化协调者智能体
        toolkit = Toolkit()
        toolkit.register_tool_function(create_worker)

        orchestrator = ReActAgent(
            name="Orchestrator",
            sys_prompt="你是一个协调者智能体。你的目标是通过将任务分解为更小的任务并创建子智能体来完成它们，从而完成给定的任务。",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            memory=InMemoryMemory(),
            formatter=DashScopeChatFormatter(),
            toolkit=toolkit,
        )

        # 任务描述
        task_description = "在 Python 中执行 hello world"

        # 创建子智能体来完成任务
        await orchestrator(Msg("user", task_description, "user"))


    asyncio.run(run_handoffs())


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.270 seconds)


.. _sphx_glr_download_tutorial_workflow_handoffs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_handoffs.ipynb <workflow_handoffs.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_handoffs.py <workflow_handoffs.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_handoffs.zip <workflow_handoffs.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
