
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_state.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_state.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_state.py:


.. _state:

State/Session Management
=================================

In AgentScope, the **"state"** refers to the agent status in the running application, including its current system prompt, memory, context, equipped tools, and other information that **change over time**.

To manage the state of an application, AgentScope designs an automatic state registration system and session-level state management, which features:

- Support **automatic state registration** for all variables inherited from ``StateModule``
- Support **manual state registration** with custom serialization/deserialization methods
- Support **session/application-level management**

.. GENERATED FROM PYTHON SOURCE LINES 16-29

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.agent import ReActAgent
    from agentscope.formatter import DashScopeChatFormatter
    from agentscope.memory import InMemoryMemory
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.module import StateModule
    from agentscope.session import JSONSession
    from agentscope.tool import Toolkit








.. GENERATED FROM PYTHON SOURCE LINES 30-61

State Module
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``StateModule`` class is the foundation for state management in AgentScope and provides three basic functions:

.. list-table:: Methods of ``StateModule``
    :header-rows: 1

    * - Method
      - Arguments
      - Description
    * - ``register_state``
      - | ``attr_name``,
        | ``custom_to_json`` (optional),
        | ``custom_from_json`` (optional)
      - Register an attribute as its state, with optional serialization/deserialization function.
    * - ``state_dict``
      - \-
      - Get the state dictionary of current object
    * - ``load_state_dict``
      - | ``state_dict``,
        | ``strict`` (optional)
      - Load the state dictionary to current object

Within an object of ``StateModule``, all the following attributes will be treated as parts of its state:

- the **attributes** that inherit from ``StateModule``
- the **attributes** registered by the ``register_state`` method

Note the ``StateModule`` supports **NESTED** serialization and deserialization:


.. GENERATED FROM PYTHON SOURCE LINES 61-91

.. code-block:: Python



    class ClassA(StateModule):
        def __init__(self) -> None:
            super().__init__()
            self.cnt = 123
            # register cnt attribute as state
            self.register_state("cnt")


    class ClassB(StateModule):
        def __init__(self) -> None:
            super().__init__()

            # attribute "a" inherits from StateModule
            self.a = ClassA()

            # register attribute "c" as state manually
            self.c = "Hello, world!"
            self.register_state("c")


    obj_b = ClassB()

    print("State of obj_b.a:")
    print(obj_b.a.state_dict())

    print("\nState of obj_b:")
    print(json.dumps(obj_b.state_dict(), indent=4))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    State of obj_b.a:
    {'cnt': 123}

    State of obj_b:
    {
        "a": {
            "cnt": 123
        },
        "c": "Hello, world!"
    }




.. GENERATED FROM PYTHON SOURCE LINES 92-96

We can observe the state of ``obj_b`` contains the state of its attribute ``a`` automatically.

In AgentScope, the ``AgentBase``, ``MemoryBase``, ``LongTermMemoryBase`` and ``Toolkit`` classes all inherit from ``StateModule``, thus supporting automatic and nested state management.


.. GENERATED FROM PYTHON SOURCE LINES 96-115

.. code-block:: Python


    # Creating an agent
    agent = ReActAgent(
        name="Friday",
        sys_prompt="You're a assistant named Friday.",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
        ),
        formatter=DashScopeChatFormatter(),
        memory=InMemoryMemory(),
        toolkit=Toolkit(),
    )

    initial_state = agent.state_dict()

    print("Initial state of the agent:")
    print(json.dumps(initial_state, indent=4))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Initial state of the agent:
    {
        "memory": {
            "content": []
        },
        "toolkit": {
            "active_groups": []
        },
        "_reasoning_hint_msgs": {
            "content": []
        },
        "name": "Friday",
        "_sys_prompt": "You're a assistant named Friday."
    }




.. GENERATED FROM PYTHON SOURCE LINES 116-118

Then we change its state by generating a reply message:


.. GENERATED FROM PYTHON SOURCE LINES 118-130

.. code-block:: Python



    async def example_agent_state() -> None:
        """Example of agent state management"""
        await agent(Msg("user", "Hello, agent!", "user"))

        print("State of the agent after generating a reply:")
        print(json.dumps(agent.state_dict(), indent=4))


    asyncio.run(example_agent_state())



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/runner/work/agentscope/agentscope/docs/tutorial/en/src/task_state.py", line 128, in <module>
        asyncio.run(example_agent_state())
      File "/opt/hostedtoolcache/Python/3.10.19/x64/lib/python3.10/asyncio/runners.py", line 44, in run
        return loop.run_until_complete(main)
      File "/opt/hostedtoolcache/Python/3.10.19/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
        return future.result()
      File "/home/runner/work/agentscope/agentscope/docs/tutorial/en/src/task_state.py", line 122, in example_agent_state
        await agent(Msg("user", "Hello, agent!", "user"))
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_agent_base.py", line 422, in __call__
        reply_msg = await self.reply(*args, **kwargs)
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_agent_meta.py", line 120, in async_wrapper
        current_output = await original_func(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/tracing/_trace.py", line 382, in wrapper
        return await func(self, *args, **kwargs)
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_react_agent.py", line 310, in reply
        msg_reasoning = await self._reasoning()
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_agent_meta.py", line 120, in async_wrapper
        current_output = await original_func(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_react_agent.py", line 385, in _reasoning
        async for content_chunk in res:
      File "/home/runner/work/agentscope/agentscope/src/agentscope/model/_dashscope_model.py", line 271, in _parse_dashscope_stream_response
        raise RuntimeError(
    RuntimeError: Failed to get response from _ API: {"status_code": 401, "request_id": "9ab58d88-754f-44f1-ac40-3baa16a8bd6c", "code": "InvalidApiKey", "message": "No API-key provided.", "output": null, "usage": null}




.. GENERATED FROM PYTHON SOURCE LINES 131-133

Now we recover the state of the agent to its initial state:


.. GENERATED FROM PYTHON SOURCE LINES 133-139

.. code-block:: Python


    agent.load_state_dict(initial_state)

    print("State after loading the initial state:")
    print(json.dumps(agent.state_dict(), indent=4))


.. GENERATED FROM PYTHON SOURCE LINES 140-157

Session Management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In AgentScope, a session refers to a collection of ``StateModule`` in an application, e.g. multiple agents.

AgentScope provides a ``SessionBase`` class with two abstract methods for session
management: ``save_session_state`` and ``load_session_state``.
Developers can implement these methods with their own storage solution.

In AgentScope, we provide a JSON based session class ``JSONSession`` that
stores/loads the session state in/from a JSON file named with the session ID.

Here we show how to use the JSON based session management in AgentScope.

Saving Session State
-----------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 157-164

.. code-block:: Python


    # change the agent state by generating a reply message
    asyncio.run(example_agent_state())

    print("\nState of agent:")
    print(json.dumps(agent.state_dict(), indent=4))


.. GENERATED FROM PYTHON SOURCE LINES 165-166

Then we save it to a session file:

.. GENERATED FROM PYTHON SOURCE LINES 166-187

.. code-block:: Python



    session = JSONSession(
        save_dir="./",  # The dir used to save the session files
    )


    async def example_session() -> None:
        """Example of session management."""
        await session.save_session_state(
            session_id="user_1",  # Use the name as the session id
            agent=agent,
        )

        print("The saved state:")
        with open("./user_1.json", "r", encoding="utf-8") as f:
            print(json.dumps(json.load(f), indent=4))


    asyncio.run(example_session())


.. GENERATED FROM PYTHON SOURCE LINES 188-191

Loading Session State
-----------------------------------------
Now we load the session state from the saved file:

.. GENERATED FROM PYTHON SOURCE LINES 191-214

.. code-block:: Python



    async def example_load_session() -> None:
        """Example of loading session state."""

        # we first clear the memory of the agent
        await agent.memory.clear()

        print("Current state of the agent:")
        print(json.dumps(agent.state_dict(), indent=4))

        # then we load the session state
        await session.load_session_state(
            session_id="user_1",
            # The keyword argument must be the same as the one used in `save_session_state`
            agent=agent,
        )
        print("After loading the session state:")
        print(json.dumps(agent.state_dict(), indent=4))


    asyncio.run(example_load_session())


.. GENERATED FROM PYTHON SOURCE LINES 215-217

Now we can see the agent state is restored to the saved state.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.655 seconds)


.. _sphx_glr_download_tutorial_task_state.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_state.ipynb <task_state.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_state.py <task_state.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_state.zip <task_state.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
