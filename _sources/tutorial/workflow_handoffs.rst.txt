
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_handoffs.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_handoffs.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_handoffs.py:


Handoffs
========================================

.. figure:: ../../_static/images/handoffs.png
   :width: 80%
   :align: center
   :alt: Orchestrator-Workers Workflow

   *Handoffs example*

It's very simple to implement the Orchestrator-Workers workflow with tool calls in AgentScope.
First, we create a function to allow the orchestrator to create workers dynamically.

.. GENERATED FROM PYTHON SOURCE LINES 17-93


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/runner/work/agentscope/agentscope/docs/tutorial/en/src/workflow_handoffs.py", line 92, in <module>
        asyncio.run(run_handoffs())
      File "/opt/hostedtoolcache/Python/3.10.19/x64/lib/python3.10/asyncio/runners.py", line 44, in run
        return loop.run_until_complete(main)
      File "/opt/hostedtoolcache/Python/3.10.19/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
        return future.result()
      File "/home/runner/work/agentscope/agentscope/docs/tutorial/en/src/workflow_handoffs.py", line 89, in run_handoffs
        await orchestrator(Msg("user", task_description, "user"))
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_agent_base.py", line 422, in __call__
        reply_msg = await self.reply(*args, **kwargs)
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_agent_meta.py", line 120, in async_wrapper
        current_output = await original_func(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/tracing/_trace.py", line 382, in wrapper
        return await func(self, *args, **kwargs)
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_react_agent.py", line 310, in reply
        msg_reasoning = await self._reasoning()
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_agent_meta.py", line 120, in async_wrapper
        current_output = await original_func(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/agent/_react_agent.py", line 374, in _reasoning
        res = await self.model(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/tracing/_trace.py", line 638, in async_wrapper
        return await func(self, *args, **kwargs)
      File "/home/runner/work/agentscope/agentscope/src/agentscope/model/_dashscope_model.py", line 221, in __call__
        parsed_response = await self._parse_dashscope_generation_response(
      File "/home/runner/work/agentscope/agentscope/src/agentscope/model/_dashscope_model.py", line 401, in _parse_dashscope_generation_response
        raise RuntimeError(response)
    RuntimeError: {"status_code": 401, "request_id": "605db854-e33a-4fa9-8808-70ff66bda4f0", "code": "InvalidApiKey", "message": "No API-key provided.", "output": null, "usage": null}






|

.. code-block:: Python


    import asyncio
    import os

    from agentscope.agent import ReActAgent
    from agentscope.formatter import DashScopeChatFormatter
    from agentscope.memory import InMemoryMemory
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.tool import (
        ToolResponse,
        Toolkit,
        execute_python_code,
    )


    # The tool function to create a worker
    async def create_worker(
        task_description: str,
    ) -> ToolResponse:
        """Create a worker to finish the given task. The worker is equipped with python execution tool.

        Args:
            task_description (``str``):
                The description of the task to be finished by the worker.
        """
        # Equip the worker agent with some tools
        toolkit = Toolkit()
        toolkit.register_tool_function(execute_python_code)

        # Create a worker agent
        worker = ReActAgent(
            name="Worker",
            sys_prompt="You're a worker agent. Your target is to finish the given task.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeChatFormatter(),
            toolkit=toolkit,
        )
        # Let the worker finish the task
        res = await worker(Msg("user", task_description, "user"))
        return ToolResponse(
            content=res.get_content_blocks("text"),
        )


    async def run_handoffs() -> None:
        """Example of handoffs workflow."""
        # Initialize the orchestrator agent
        toolkit = Toolkit()
        toolkit.register_tool_function(create_worker)

        orchestrator = ReActAgent(
            name="Orchestrator",
            sys_prompt="You're an orchestrator agent. Your target is to finish the given task by decomposing it into smaller tasks and creating workers to finish them.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            memory=InMemoryMemory(),
            formatter=DashScopeChatFormatter(),
            toolkit=toolkit,
        )

        # The task description
        task_description = "Execute hello world in Python"

        # Create a worker to finish the task
        await orchestrator(Msg("user", task_description, "user"))


    asyncio.run(run_handoffs())


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.925 seconds)


.. _sphx_glr_download_tutorial_workflow_handoffs.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_handoffs.ipynb <workflow_handoffs.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_handoffs.py <workflow_handoffs.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_handoffs.zip <workflow_handoffs.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
